C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE USB
OBJECT MODULE PLACED IN .\Objects\usb.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\C51\BIN\C51.EXE USB\Src\usb.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User
                    -\Inc;.\Drivers\Inc;.\USB\Inc) DEBUG PRINT(.\Listings\usb.lst) TABS(2) OBJECT(.\Objects\usb.obj)

line level    source

   1          
   2          // Written By : Thanh Tung
   3          // E-Mail     : electricthanhtung@gmail.com
   4          // Facebook   : https://www.facebook.com/electricthanhtung
   5          
   6          #include "main.h"
   7          #include "usb.h"
   8          #include "usb_desc.h"
   9          
  10          volatile unsigned char data usb_rx_buffer[12];
  11          volatile unsigned char xdata usb_tx_buffer[12];
  12          volatile unsigned char data usb_tx_count = 0, usb_rx_count = 0;
  13          volatile unsigned char data UEPF = 1, UDRF = 1;
  14          volatile unsigned char xdata USB_TimerTick = 0;   // 20ms
  15          static volatile unsigned char xdata rx_buffer[250];
  16          static unsigned char xdata data_sync;
  17          
  18          static data struct usb_type{
  19            volatile unsigned char state;
  20            volatile unsigned char event;
  21            volatile unsigned char device_address;
  22            
  23            volatile unsigned char received;
  24            volatile unsigned char ack;
  25            
  26            unsigned char endpoint;
  27            
  28            volatile unsigned int wLength;
  29          } usb = {0, 0, 0, 0, 0, 0, 0xFF};
  30          
  31          extern void usb_send_ack();
  32          extern void usb_send_nack();
  33          
  34          static void usb_send_answer(){
  35   1        extern void usb_tx();
  36   1        P3 = (P3 & 0xFC) | 0x01;
  37   1        P3M0 |= 0x03;
  38   1        P3M1 &= ~0x03;
  39   1        usb_tx();
  40   1        P3M0 &= ~0x03;
  41   1        P3M1 |= 0x03;
  42   1      }
  43          
  44          static void usb_received_reentrant() reentrant {
  45   1        static unsigned char data data_count = 0, pid_data_old;
  46   1        UDRF = 0;
  47   1        if(usb_rx_buffer[1] == USB_PID_OUT){
  48   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  49   2          if((address == usb.device_address) || (address == 0)){
  50   3            usb.state = USB_STATE_OUT;
  51   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  52   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
  53   3          }
  54   2        }
C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 2   

  55   1        else if(usb_rx_buffer[1] == USB_PID_SETUP){
  56   2          //usb.state = USB_STATE_SETUP;
  57   2          unsigned char address = usb_rx_buffer[2] & 0x7F;
  58   2          if((address == usb.device_address) || (address == 0)){
  59   3            usb.state = USB_STATE_SETUP;
  60   3            usb.endpoint = usb_rx_buffer[2] >> 7;
  61   3            usb.endpoint |= ((usb_rx_buffer[3] & 0x07) << 1);
  62   3          }
  63   2          return;
  64   2        }
  65   1        else switch(usb_rx_buffer[1]){
  66   2        case USB_PID_IN:{
  67   3          unsigned char address = usb_rx_buffer[2] & 0x7F;
  68   3          if((address != usb.device_address) && (address != 0))
  69   3            return;
  70   3          if(usb_tx_count){
  71   4            usb_send_answer();
  72   4            usb_tx_count = 0;
  73   4          }
  74   3      //    if(usb.event == USB_EVENT_READY_DATA_IN){
  75   3      //      usb_send_answer();
  76   3      //      usb.event = USB_EVENT_WAIT_DATA_IN;
  77   3      //    }
  78   3          else
  79   3            usb_send_nack();
  80   3          usb.state = USB_STATE_IN;
  81   3          break;
  82   3        }
  83   2        case USB_PID_DATA0:{
  84   3          if(usb.state == USB_STATE_OUT){
  85   4            if(pid_data_old == USB_PID_DATA1){
  86   5              unsigned char xdata *buffer = &rx_buffer[data_count];
  87   5              buffer[0] = usb_rx_buffer[2];
  88   5              buffer[1] = usb_rx_buffer[3];
  89   5              buffer[2] = usb_rx_buffer[4];
  90   5              buffer[3] = usb_rx_buffer[5];
  91   5              buffer[4] = usb_rx_buffer[6];
  92   5              buffer[5] = usb_rx_buffer[7];
  93   5              buffer[6] = usb_rx_buffer[8];
  94   5              buffer[7] = usb_rx_buffer[9];
  95   5              usb_send_ack();
  96   5              data_count += 8;
  97   5              if(data_count >= usb.wLength){
  98   6                usb.received = 1;
  99   6                usb_tx_count = 0;
 100   6                UDRF = 1;
 101   6              }
 102   5              pid_data_old = USB_PID_DATA0;
 103   5            }
 104   4            else{
 105   5              delay_us(1);
 106   5              usb_send_ack();
 107   5            }
 108   4            usb.event = USB_EVENT_NO;
 109   4          }
 110   3          else{
 111   4            rx_buffer[2] = usb_rx_buffer[2];
 112   4            rx_buffer[3] = usb_rx_buffer[3];
 113   4            rx_buffer[4] = usb_rx_buffer[4];
 114   4            rx_buffer[5] = usb_rx_buffer[5];
 115   4            rx_buffer[6] = usb_rx_buffer[6];
 116   4            rx_buffer[7] = usb_rx_buffer[7];
C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 3   

 117   4            rx_buffer[8] = usb_rx_buffer[8];
 118   4            pid_data_old = USB_PID_DATA0;
 119   4            data_count = 0;
 120   4            usb.event = USB_EVENT_RECEIVE_SETUP_DATA;
 121   4            if((usb_rx_buffer[2] != 0x21) && (usb_rx_buffer[3] != 0x09))
 122   4              UDRF = 1;
 123   4            //UDRF = 1;
 124   4            usb_send_ack();
 125   4            
 126   4      //      wLength = usb_rx_buffer[9];
 127   4      //      wLength = (wLength << 8) | usb_rx_buffer[8];
 128   4            
 129   4            usb.wLength = usb_rx_buffer[8];
 130   4          }
 131   3          break;
 132   3        }
 133   2        case USB_PID_DATA1:
 134   2          if (usb.state == USB_STATE_OUT){
 135   3            if(usb_rx_count > 4){
 136   4              if(pid_data_old == USB_PID_DATA0){
 137   5                unsigned char xdata *buffer = &rx_buffer[data_count];
 138   5                buffer[0] = usb_rx_buffer[2];
 139   5                buffer[1] = usb_rx_buffer[3];
 140   5                buffer[2] = usb_rx_buffer[4];
 141   5                buffer[3] = usb_rx_buffer[5];
 142   5                buffer[4] = usb_rx_buffer[6];
 143   5                buffer[5] = usb_rx_buffer[7];
 144   5                buffer[6] = usb_rx_buffer[8];
 145   5                buffer[7] = usb_rx_buffer[9];
 146   5                usb_send_ack();
 147   5                data_count += 8;
 148   5                if(data_count >= usb.wLength){
 149   6                  usb.received = 1;
 150   6                  usb_tx_count = 0;
 151   6                  UDRF = 1;
 152   6                }
 153   5                pid_data_old = USB_PID_DATA1;
 154   5              }
 155   4              else{
 156   5                delay_us(1);
 157   5                usb_send_ack();
 158   5              }
 159   4              usb.event = USB_EVENT_NO;
 160   4            }
 161   3            else{
 162   4              usb_tx_count = 0;
 163   4              delay_us(1);
 164   4              usb.state = USB_STATE_IDLE;
 165   4              usb_send_ack();
 166   4            }
 167   3          }
 168   2          break;
 169   2        case USB_PID_ACK:
 170   2          usb.ack = 1;
 171   2          break;
 172   2        case USB_PID_NACK:
 173   2          break;
 174   2        default:
 175   2          usb.state = USB_STATE_IDLE;
 176   2          break;
 177   2        }
 178   1      }
C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 4   

 179          
 180          void usb_received() {
 181   1        usb_received_reentrant();
 182   1      }
 183          
 184          const unsigned int code table[] = {
 185            0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
 186            0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
 187            0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
 188            0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
 189            0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
 190            0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
 191            0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
 192            0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
 193            0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
 194            0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
 195            0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
 196            0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
 197            0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
 198            0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
 199            0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
 200            0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
 201            0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
 202            0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
 203            0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
 204            0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
 205            0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
 206            0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
 207            0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
 208            0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
 209            0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
 210            0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
 211            0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
 212            0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
 213            0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
 214            0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
 215            0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
 216            0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
 217          };
 218          
 219          void usb_calc_crc16(unsigned char length) reentrant {
 220   1        unsigned int crc = 0xFFFF;
 221   1        unsigned char i = 2;
 222   1        while(length--){
 223   2          crc = table[(crc ^ usb_tx_buffer[i]) & 0xFF] ^ (crc >> 8);
 224   2          i++;
 225   2        }
 226   1        crc = ~crc;
 227   1        usb_tx_buffer[i] = crc;
 228   1        usb_tx_buffer[i + 1] = crc >> 8;
 229   1      }
 230          
 231          //static void usb_calc_crc16(unsigned char length){
 232          //  unsigned int data crc = 0xFFFF;
 233          //  unsigned char data index;
 234          //  for(index = 0; index < length; index++){
 235          //    unsigned char data i;
 236          //    crc ^= usb_tx_buffer[index + 2];
 237          //    for (i = 8; i--;){
 238          //      if (crc & 0x01){
 239          //        crc >>= 1;
 240          //        crc ^= 0xA001;
C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 5   

 241          //      }
 242          //      else
 243          //        crc >>= 1;
 244          //    }
 245          //  }
 246          //  crc = ~crc;
 247          //  usb_tx_buffer[index + 2] = (unsigned char)crc;
 248          //  usb_tx_buffer[index + 3] = (unsigned char)(crc >> 8);
 249          //}
 250          
 251          void USB_SendData(unsigned char *buffer, unsigned char length) reentrant {
 252   1        unsigned char timeStart;
 253   1        usb.state = USB_STATE_IN;
 254   1        usb_tx_buffer[0] = 0x80;
 255   1        data_sync = USB_PID_DATA1;
 256   1        while(length){
 257   2          usb_tx_buffer[1] = data_sync;
 258   2          if (data_sync == USB_PID_DATA1)
 259   2            data_sync = USB_PID_DATA0;
 260   2          else
 261   2            data_sync = USB_PID_DATA1;
 262   2          if(length >= 8){
 263   3            unsigned char i;
 264   3            for(i = 0; i < 8; i++)
 265   3              usb_tx_buffer[i + 2] = buffer[i];
 266   3            buffer += 8;
 267   3            usb_calc_crc16(8);
 268   3            usb_tx_count = 12;
 269   3            length -= 8;
 270   3          }
 271   2          else{
 272   3            unsigned char i;
 273   3            for(i = 2; i < (length + 2); i++)
 274   3              usb_tx_buffer[i] = *buffer++;
 275   3            usb_calc_crc16(length);
 276   3            usb_tx_count = length + 4;
 277   3            length = 0;
 278   3          }
 279   2          
 280   2          timeStart = USB_TimerTick;
 281   2          while(usb_tx_count){
 282   3            if((usb.state != USB_STATE_IN) || ((unsigned char)(USB_TimerTick - timeStart) > (100 / TimerTickStep)))
             -{
 283   4              usb_tx_count = 0;
 284   4              return;
 285   4            }
 286   3          }
 287   2          
 288   2      //    usb.event = USB_EVENT_READY_DATA_IN;
 289   2      //    while(usb.event != USB_EVENT_WAIT_DATA_IN);
 290   2        }
 291   1      }
 292          
 293          void USB_WriteBuf(unsigned char *buffer, unsigned char length) reentrant {
 294   1        unsigned char start = 0;
 295   1        unsigned char timeStart;
 296   1        usb_tx_buffer[0] = 0x80;
 297   1        data_sync = USB_PID_DATA1;
 298   1        while(length){
 299   2          usb_tx_buffer[1] = data_sync;
 300   2          if (data_sync == USB_PID_DATA1)
 301   2            data_sync = USB_PID_DATA0;
C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 6   

 302   2          else
 303   2            data_sync = USB_PID_DATA1;
 304   2          
 305   2          if(!start){
 306   3            start = 1;
 307   3            usb_tx_buffer[2] = length;
 308   3            
 309   3            if((length % 8) == 7)
 310   3              length++;
 311   3            
 312   3            if(length >= 7){
 313   4              unsigned char i;
 314   4              for(i = 0; i < 7; i++)
 315   4                usb_tx_buffer[i + 3] = buffer[i];
 316   4              buffer += 7;
 317   4              usb_calc_crc16(8);
 318   4              usb_tx_count = 12;
 319   4              length -= 7;
 320   4            }
 321   3            else{
 322   4              unsigned char i;
 323   4              for(i = 3; i < (length + 3); i++)
 324   4                usb_tx_buffer[i] = *buffer++;
 325   4              usb_calc_crc16(length + 1);
 326   4              usb_tx_count = length + 5;
 327   4              length = 0;
 328   4            }
 329   3          }
 330   2          else if(length >= 8){
 331   3            unsigned char i;
 332   3            for(i = 0; i < 8; i++)
 333   3              usb_tx_buffer[i + 2] = buffer[i];
 334   3            buffer += 8;
 335   3            usb_calc_crc16(8);
 336   3            usb_tx_count = 12;
 337   3            length -= 8;
 338   3          }
 339   2          else{
 340   3            unsigned char data i;
 341   3            for(i = 2; i < (length + 2); i++)
 342   3              usb_tx_buffer[i] = *buffer++;
 343   3            usb_calc_crc16(length);
 344   3            usb_tx_count = length + 4;
 345   3            length = 0;
 346   3          }
 347   2          
 348   2          timeStart = USB_TimerTick;
 349   2          while(usb_tx_count){
 350   3            if((unsigned char)(USB_TimerTick - timeStart) > (100 / TimerTickStep)){
 351   4              usb_tx_count = 0;
 352   4              return;
 353   4            }
 354   3          }
 355   2        }
 356   1      }
 357          
 358          static void USB_SendNull(unsigned char PID_DATA) reentrant {
 359   1        unsigned char timeStart;
 360   1        usb.state = USB_STATE_IN;
 361   1        usb_tx_buffer[0] = 0x80;
 362   1        usb_tx_buffer[1] = PID_DATA;
 363   1        usb_tx_buffer[2] = 0;
C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 7   

 364   1        usb_tx_buffer[3] = 0;
 365   1        usb_tx_count = 4;
 366   1        
 367   1        timeStart = USB_TimerTick;
 368   1        while(usb_tx_count){
 369   2          if((usb.state != USB_STATE_IN) || ((unsigned char)(USB_TimerTick - timeStart) > (100 / TimerTickStep))){
 370   3            usb_tx_count = 0;
 371   3            return;
 372   3          }
 373   2        }
 374   1      }
 375          
 376          static void usb_send_stall() {
 377   1        usb_tx_buffer[0] = 0x80;
 378   1        usb_tx_buffer[1] = USB_PID_STALL;
 379   1        usb_tx_count = 2;
 380   1      }
 381          
 382          void USB_Process() {
 383   1        if(usb.event == USB_EVENT_RECEIVE_SETUP_DATA){
 384   2          usb.event = USB_EVENT_NO;
 385   2          if(rx_buffer[2] == USBRQ_STD_FROM_DEVICE){
 386   3            if(rx_buffer[3] == USBRQ_GET_DESCRIPTOR){
 387   4              switch(rx_buffer[5]){
 388   5              case USBDESCR_DEVICE:
 389   5                USB_SendData((unsigned char *)usb_device_descriptor, ARRAY_LENGHT(usb_device_descriptor));
 390   5                break;
 391   5              case USBDESCR_CONFIG:
 392   5                if(rx_buffer[8] < ARRAY_LENGHT(usb_configuration_descriptor))
 393   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, rx_buffer[8]);
 394   5                else
 395   5                  USB_SendData((unsigned char *)usb_configuration_descriptor, ARRAY_LENGHT(usb_configuration_descripto
             -r));
 396   5                break;
 397   5              case USBDESCR_STRING:
 398   5                if(rx_buffer[4] == 0){
 399   6                  USB_SendData((unsigned char *)usb_string_descriptor_language, ARRAY_LENGHT(usb_string_descriptor_lan
             -guage));
 400   6                  USB_SendNull(data_sync);
 401   6                }
 402   5                else if(rx_buffer[4] == 1){
 403   6                  USB_SendData((unsigned char *)usb_string_descriptor_vendor, ARRAY_LENGHT(usb_string_descriptor_vendo
             -r));
 404   6                  USB_SendNull(data_sync);
 405   6                }
 406   5                else if(rx_buffer[4] == 2){
 407   6                  USB_SendData((unsigned char *)usb_string_descriptor_device, ARRAY_LENGHT(usb_string_descriptor_devic
             -e));
 408   6                  USB_SendNull(data_sync);
 409   6                }
 410   5                else if(rx_buffer[4] == 3){
 411   6                  USB_SendData((unsigned char *)usb_string_descriptor_serial, ARRAY_LENGHT(usb_string_descriptor_seria
             -l));
 412   6                  USB_SendNull(data_sync);
 413   6                }
 414   5                else
 415   5                  USB_SendNull(USB_PID_DATA1);
 416   5                break;
 417   5              default:
 418   5                  break;
 419   5              }
 420   4            }
C51 COMPILER V9.60.0.0   USB                                                               06/06/2020 14:24:47 PAGE 8   

 421   3            else if(rx_buffer[3] == USBRQ_GET_STATUS){
 422   4              usb_send_stall();
 423   4            }
 424   3          }
 425   2          else if(rx_buffer[2] == USBRQ_STD_TO_DEVICE){
 426   3            switch(rx_buffer[3]){
 427   4              case USBRQ_SET_ADDRESS:
 428   4                if(usb.device_address != 0){
 429   5                  //
 430   5                }
 431   4                USB_SendNull(USB_PID_DATA1);
 432   4                usb.device_address = rx_buffer[4];
 433   4                break;
 434   4              case (USBRQ_SET_CONFIGURATION):
 435   4                USB_SendNull(USB_PID_DATA1);
 436   4                break;
 437   4            }
 438   3          }
 439   2          else if (rx_buffer[2] == USBRQ_STD_FROM_INTERFACE){
 440   3            if(rx_buffer[3] == USBRQ_GET_DESCRIPTOR)
 441   3              USB_SendData((unsigned char *)usb_report_descriptor, ARRAY_LENGHT(usb_report_descriptor));
 442   3          }
 443   2          else if(rx_buffer[2] == USBRQ_CLASS_TO_INTERFACE){
 444   3            if(rx_buffer[3] == 0x0A)
 445   3              usb_send_stall();
 446   3          }
 447   2          else if(rx_buffer[2] == USBRQ_CLASS_FROM_INTERFACE){
 448   3      //      static const unsigned char code usb_report_null[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 449   3      //      USB_SendData((unsigned char *)usb_report_null, ARRAY_LENGHT(usb_report_null));
 450   3          }
 451   2        }
 452   1        if(usb.received){
 453   2          extern void USB_Received(unsigned char endpoint, unsigned char *buffer, unsigned char length) reentrant;
 454   2          unsigned char xdata timeStart;
 455   2          usb.ack = 0;
 456   2          USB_SendNull(USB_PID_DATA1);
 457   2          timeStart = USB_TimerTick;
 458   2          usb.received = 0;
 459   2          usb.event = USB_EVENT_NO;
 460   2          while(!usb.ack){
 461   3            if((unsigned char)(USB_TimerTick - timeStart) > 5)
 462   3              return;
 463   3          }
 464   2          USB_Received(usb.endpoint, rx_buffer, usb.wLength);
 465   2        }
 466   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2149    ----
   CONSTANT SIZE    =    701    ----
   XDATA SIZE       =    264       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
